@page "/EmployeeGroups"
<div class="container-fluid">
    <div class="row">
        <div class="col-2">
            <div class="row">
                <div class="col">
                    <div class="input-group">
                        <input class="form-control" @bind="g.GroupName" placeholder="New Group Name" />
                        <button class="btn btn-success" @onclick="saveGroup"> Create New Group </button>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col">
                    <ol class="list-group">
                        @if (groups != null)
                        {
                            foreach (var g in groups)
                            {
                                <li class="list-group-item" style="display: flex; justify-content: space-between; align-items: center;">
                                    @if (SelectedGroup == g)
                                    {
                                        <button class="btn btn-sm btn-secondary" style="float: left;">Selected</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" style="float: left;" @onclick="()=>selectGroup(g)">Select</button>
                                    }
                                    <span>@g.GroupName</span>
                                    @if (is_savingGroupEmplouyee && SelectedGroup == g)
                                    {
                                        <button class="btn btn-sm btn-outline-primary" style="float: right;">
                                            <div class="spinner-border" role="status">
                                                <span class="visually-hidden"></span>
                                            </div>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-primary" style="float: right;" @onclick="()=>saveGroupEmployees(g)">Save</button>
                                    }
                                </li>
                            }
                        }
                    </ol>
                </div>
            </div>
        </div>

        <div class="col-5">

            

            @if (employeesNotInGroup != null)
            {
                <input class="form-control" type="search" placeholder="Search employees not in group" @onchange="(ChangeEventArgs e)=>SearchEmployeeNotInGroup(e)" />
                <div style="max-height:80vh; overflow-y:scroll">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Code</th>
                                <th>Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var e in employeesNotInGroup.OrderBy(x => x.EmployeeCode).Skip((currentPageNotInGroup - 1) * pageSize).Take(pageSize))
                            {
                                <tr>
                                    <td>@e.EmployeeCode</td>
                                    <td><h6>@e.FirstName @e.LastName</h6></td>
                                    <td>
                                        <button class="btn btn-outline-success btn-sm" @onclick="()=>{ employeesInGroup.Add(e); employeesNotInGroup.Remove(e);}">
                                            <span class="oi oi-plus"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div>
                    <button class="btn btn-secondary btn-sm" @onclick="() => ChangePageNotInGroup(-1)" disabled="@(currentPageNotInGroup == 1)">Previous</button>
                    Page @currentPageNotInGroup of @TotalPagesNotInGroup
                    <button class="btn btn-secondary btn-sm" @onclick="() => ChangePageNotInGroup(1)" disabled="@(currentPageNotInGroup == TotalPagesNotInGroup)">Next</button>
                </div>
            }
        </div>

        <div class="col-5">
            @if (employeesInGroup != null)
            {
                <input class="form-control" type="search" placeholder="Search employees not in group" @onchange="(ChangeEventArgs e)=>SearchEmployeeInGroup(e)" />
                <div style="max-height:80vh; overflow-y:scroll">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Code</th>
                                <th>Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var e in employeesInGroup.OrderBy(x => x.EmployeeCode).Skip((currentPageInGroup - 1) * pageSize).Take(pageSize))
                            {
                                <tr>
                                    <td>@e.EmployeeCode</td>
                                    <td><h6>@e.FirstName @e.LastName</h6></td>
                                    <td>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="()=>{ employeesInGroup.Remove(e); employeesNotInGroup.Add(e);}">
                                            <span class="oi oi-x"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div>
                    <button class="btn btn-secondary btn-sm" @onclick="() => ChangePageInGroup(-1)" disabled="@(currentPageInGroup == 1)">Previous</button>
                    Page @currentPageInGroup of @TotalPagesInGroup
                    <button class="btn btn-secondary btn-sm" @onclick="() => ChangePageInGroup(1)" disabled="@(currentPageInGroup == TotalPagesInGroup)">Next</button>
                </div>
            }
        </div>
    </div>
</div>

@code {

    string searchTextNotInGroup = "";
    string searchTextInGroup = "";

    Group g = new Group();
    Group SelectedGroup = new Group();
    bool is_savingGroupEmplouyee = false;
    List<Group>? groups;
    List<Employee>? employees;
    List<Employee> employeesNotInGroup = new List<Employee>();
    List<Employee> employeesInGroup = new List<Employee>();
    int currentPageNotInGroup = 1;
    int currentPageInGroup = 1;
    int pageSize = 20;

    int TotalPagesNotInGroup => (int)Math.Ceiling(employeesNotInGroup.Count / (double)pageSize);
    int TotalPagesInGroup => (int)Math.Ceiling(employeesInGroup.Count / (double)pageSize);

    void ChangePageNotInGroup(int change)
    {
        currentPageNotInGroup = Math.Max(1, Math.Min(TotalPagesNotInGroup, currentPageNotInGroup + change));
    }

    void ChangePageInGroup(int change)
    {
        currentPageInGroup = Math.Max(1, Math.Min(TotalPagesInGroup, currentPageInGroup + change));
    }

    protected override async Task OnInitializedAsync()
    {

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            groups = await dbcontext.Groups.ToListAsync();
            employees = await dbcontext.Employees.ToListAsync();

            employeesNotInGroup = employees.ToList();
        }
    }

    async Task saveGroup()
    {
        g.Id = Guid.NewGuid();
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            dbcontext.Groups.Add(g);
            await dbcontext.SaveChangesAsync();
            groups = await dbcontext.Groups.ToListAsync();
            g = new Group();
        }
    }

    async Task selectGroup(Group g)
    {
        SelectedGroup = g;
        employeesInGroup = new List<Employee>();
        employeesNotInGroup = employees.ToList();

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            var existingEmployeesInTheGroup = await dbcontext.GroupEmployees.Where(x => x.GroupId == g.Id).ToListAsync();

            foreach (var e in existingEmployeesInTheGroup)
            {
                var x = employees.FirstOrDefault(x => x.Id == e.EmployeId);
                if (x != null)
                {
                    employeesInGroup.Add(x);
                    employeesNotInGroup.Remove(x);
                }
            }
        }
    }

    async Task saveGroupEmployees(Group g)
    {
        is_savingGroupEmplouyee = true;
        SelectedGroup = g;

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            List<GroupEmployee> newEmployeesIntheGroup = new List<GroupEmployee>();
            foreach (var e in employeesInGroup)
            {
                newEmployeesIntheGroup.Add(new GroupEmployee
                    {
                        Id = Guid.NewGuid(),
                        EmployeId = e.Id,
                        GroupId = g.Id,
                    });
            }

            var existingEmployeesInTheGroup = await dbcontext.GroupEmployees.Where(x => x.GroupId == g.Id).ToListAsync();
            foreach (var e in newEmployeesIntheGroup)
            {
                if (existingEmployeesInTheGroup.FirstOrDefault(x => x.GroupId == e.GroupId && x.EmployeId == e.EmployeId) == null)
                {
                    dbcontext.GroupEmployees.Add(e);
                }
            }

            await dbcontext.SaveChangesAsync();
        }
        is_savingGroupEmplouyee = false;
    }

    void SearchEmployeeNotInGroup(ChangeEventArgs e)
    {
        

        searchTextNotInGroup = e.Value.ToString();
        employeesNotInGroup = employees.Where(e => e.EmployeeCode !=null && e.EmployeeCode.Contains(searchTextNotInGroup, StringComparison.OrdinalIgnoreCase)).ToList();
        // Console.WriteLine($"Found {employeesNotInGroup.Count} employees not in group"); // Debug output
        currentPageNotInGroup = 1;
    }

    void SearchEmployeeInGroup(ChangeEventArgs e)
    {
        searchTextInGroup = e.Value.ToString();
       
        employeesInGroup = employees.Where(e => e.EmployeeCode != null && e.EmployeeCode.Contains(searchTextInGroup, StringComparison.OrdinalIgnoreCase)).ToList();
        // Console.WriteLine($"Found {employeesInGroup.Count} employees in group"); // Debug output
        currentPageInGroup = 1;
    }


}
