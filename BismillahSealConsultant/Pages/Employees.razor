@page "/employees"

@using System.Globalization;

@inject NavigationManager nav
@inject IWebHostEnvironment _enviournment;
@inject IJSRuntime jsRuntime


@if (loading)
{
    <Chase Size="100px" style="margin-left:45%; margin-top: 45vh;"></Chase>
}
else
{

    @if (logger.checkAccess("/employees", rollId))
    {
        <div class="container-fluid shadow">
            <div class="row">
                <div class="col-12 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0)">
                        <div class="input-group shadow-lg">


                            <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee( __e?.Value?.ToString()) )" placeholder="Search Employees" />

                            <button class="btn btn-dark" @onclick="makeCsv">
                                <span class="oi oi-spreadsheet" aria-hidden="true"></span> Export to csv
                            </button>

                        </div>

                      

                    </Animate>



                </div>

                <div class="col-6 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                </div>


            </div>


            <div class="row" style="padding:10px; margin-top:10px">
                <div class="col-12 employe-list-scroll" style="overflow-y:auto; height:80vh">
                    <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                        <table class="table table-bordered table-responsive table-striped table-hover employee-list">
                            <thead class="sticky-top">
                                <tr class="sticky-table-header">

                                    <th>
                                        Photo
                                    </th>

                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                        Name
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                        IC/PP
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                        Code
                                    </th>

                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.Phone).ToList();}">
                                        Phone
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.JoiningDate).ToList();}">
                                        Joining date
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.RollId).ToList();}">
                                        Possition
                                    </th>

                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.Nationality).ToList();}">
                                        Nationality
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.PassExp).ToList();}">
                                        Passpost Exp
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderByDescending(x=>x.Active).ThenBy(x=>x.FirstName).ToList();}">
                                        Active
                                    </th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var e in employeeListSearched)
                                {
                                    <tr>



                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            <img src="Photos/@e.Photo" class="rounded img-thumbnail" style="height:160px; width:100px">
                                        </td>

                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.FirstName&nbsp;@e.LastName
                                        </td>
                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.IcPp
                                        </td>
                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.EmployeeCode
                                        </td>

                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.Phone
                                        </td>
                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.JoiningDate
                                        </td>
                                        <th>
                                            @if (e.RollId != null)
                                            {
                                                @(rolls.FirstOrDefault(x => x.Id == e.RollId)?.Name)
                                            }
                                            else
                                            {
                                                <h6>Not Assigned</h6>
                                            }



                                        </th>


                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.Nationality
                                        </td>
                                        <td @onclick="()=>navi(e.Id.ToString())">
                                            @e.PassExp
                                        </td>

                                        <td @onclick="async ()=>{

                                     using(sealConsultantContext dbcontext = new sealConsultantContext()){

                                        e.Active = !e.Active;


                                        dbcontext.Employees.Update(e);

                                        await dbcontext.SaveChangesAsync();


                                        employeeList = await dbcontext.Employees.OrderByDescending(x=>x.Active).ThenBy(x=>x.FirstName).ToListAsync();

                                        employeeListSearched = employeeList;

                                        await InvokeAsync(StateHasChanged);

                                     }

                                 }">
                                            <div class="form-check form-switch">

                                                <input class="form-check-input" type="checkbox" @bind="e.Active">

                                            </div>
                                        </td>


                                    </tr>
                                }

                            </tbody>
                        </table>
                    </Animate>


                </div>
            </div>

        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="col">
                <img src="download.jpg" class="img-fluid" alt="Responsive image">
            </div>
        </div>
    }



}




@code {
    List<Employee> employeeList = new List<Employee>();
    List<Employee> employeeListSearched = new List<Employee>();
    List<Roll> rolls = new List<Roll>();

    bool loading = false;
    Logger logger = new Logger();
    string rollId = string.Empty;
    [CascadingParameter] Blazored.Modal.Services.IModalService Modal { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);
        rollId = await localStorage.GetItemAsync<string>("Roll");
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {


            employeeList = await dbcontext.Employees.OrderByDescending(x => x.Active).ThenBy(x => x.FirstName).ToListAsync();
            rolls = await dbcontext.Rolls.ToListAsync();
            employeeListSearched = employeeList;


        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    void searchEmployee(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched = employeeList.Where(x =>

            (x.FirstName != null &&
            x.LastName != null &&
            x.EmployeeCode != null &&
            x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }



    async Task makeCsv()
    {
        var basePath = Path.Combine("wwwroot", "Docs");

        var path = Path.Combine(_enviournment.ContentRootPath, basePath, "Export.csv");



        using (StreamWriter file = new StreamWriter(path, false))
        {

            try
            {
                file.WriteLine($"Name,Passport,Code,Current Address,Pemanant Address,Date of birth,EPF,Joinning Date,Tax Number,Email,Phone,EmergencyContact,Nationality,Possition,Passport Exp,VisaExp,Active,BankName,BankAcNo,Cidb,Socso,TaxNumber");

                foreach (Employee e in employeeList)
                {

                    file.WriteLine($"{e.FirstName} {e.LastName},{e.IcPp},{e.EmployeeCode},{e.CurrentAddress},{e.PemanantAddress},{e?.Dob?.ToString("dd-MM-yyyy")},{e?.Epf},{e?.JoiningDate?.ToString("dd-MM-yyyy")},{e?.TaxNumber},{e?.Email},{e.Phone},{e.EmergencyContact},{e.Nationality},{rolls.FirstOrDefault(x => x.Id == e.RollId)?.Name},{e.PassExp},{e.VisaExp},{e.Active},{e.BankName},{e.BankAcNo} ,{e.Cidb},{e.Socso},{e.TaxNumber}");


                }

                await ShowModal("Message, Your file has been created");

                await NavigateToNewTab();
            }
            catch
            {
                await ShowModal("Message, Please try again");
            }

        }


    }
    public async Task NavigateToNewTab()
    {
        string url = "Docs/Export.csv";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task ShowModal(string message)
    {
        var parameters = new ModalParameters().Add(nameof(OkModal.Message), message);

        var modal = Modal.Show<OkModal>("Confimation", parameters);

        await modal.Result;

    }


    void navi(string id)
    {
        nav.NavigateTo($"/employee/{id}");
    }
}
