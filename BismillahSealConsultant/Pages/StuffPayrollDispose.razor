@page "/stuffPayrollDispose"

@inject NavigationManager nav
@using System.Globalization



@if (loading)
{
        <Chase Size="100px" style="margin-left:45%; margin-top: 45vh;"></Chase>
}
else
{

    @if (logger.checkAccess("/ditchpatchPayroll", rollId))
    {
                <div class="container-fluid">
                    <div class="row">

                        <div class="col-7">

                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0)">
                                <div class="input-group p-1 shadow">

                                    <input type="month" class="form-control" @onchange="(ChangeEventArgs e)=>{
                             selectedMonth = DateOnly.Parse(e?.Value?.ToString()); StateHasChanged();

                        }" />

                            @if (isSavingDitchpatch)
                            {

                                            <button class="btn btn-dark"> <Flow Size="20px" Color="#FFFFFF"></Flow> </button>

                            }
                            else
                            {

                                            <button class="btn btn-dark" @onclick="ditchpatch"> <span class="oi oi-print" aria-hidden="true"></span> Dispatch </button>
                            }



                                    <button class="btn btn-dark" @onclick="@(()=>{

                           // dpl.add_employee(dispatchList);

                            nav.NavigateTo("/SalarayReport");

                          })">
                                        <span class="oi oi-document" aria-hidden="true"></span> Report
                                    </button>





                                    <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee( __e?.Value?.ToString()) )" placeholder="Search Employees" />

                                    <button class="btn btn-dark" @onclick="()=>dispatchList = employeeList.ToList()"> <span class="oi oi-list-rich" aria-hidden="true"></span> Select All </button>

                                    <button class="btn btn-dark" @onclick="()=>dispatchList = new List<Employee>()"> <span class="oi oi-circle-x" aria-hidden="true"></span> Select None </button>

                                </div>


                            </Animate>

                        </div>




                    </div>
                    <div class="row">



                        <div class="row" style="padding:10px; margin-top:10px">
                            <div class="col-3" style="overflow-y:auto; height:80vh">
                                <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                                    <table class="table table-secondary table-responsive table-striped table-sm">
                                        <thead class="sticky-top">
                                            <tr class="table-primary sticky-table-header">



                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                                    Name
                                                </th>
                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                                    IC/PP
                                                </th>
                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                                    Code
                                                </th>



                                                <th style="text-align:right">
                                                    Total Amount
                                                </th>

                                                <th style="text-align:center">

                                                </th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                    @foreach (var e in employeeListSearched)
                                    {
                                                    <tr>





                                                        <td>
                                                @e.FirstName&nbsp;@e.LastName
                                                        </td>
                                                        <td>
                                                @e.IcPp
                                                        </td>
                                                        <td>
                                                @e.EmployeeCode
                                                        </td>



                                                        <td style="text-align:right">
                                                @String.Format("{0:0.##}", CalculateTotalSalary(e)[0])
                                                        </td>

                                                        <td style="text-align:center">


                                                            <button class="btn btn-primary" @onclick="@(()=>{

                                                if( dispatchList.FirstOrDefault(x=>x.Id == e.Id) ==null){
                                                    dispatchList.Add(e);
                                                }else{
                                                    var parameters = new ModalParameters().Add(nameof(OkModal.Message), "Employee Already in the list");

                                                    var modal = Modal.Show<OkModal>("Confimation", parameters);
                                                }

                                                })">
                                                                <span class="oi oi-plus" aria-hidden="true"></span>
                                                            </button>


                                                        </td>


                                                    </tr>
                                    }

                                        </tbody>
                                    </table>
                                </Animate>


                            </div>

                            <div class="col-9" style="overflow-y:auto; height:80vh">
                                <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                                    <table class="table table-secondary table-responsive table-bordered table-sm">
                                        <thead class="sticky-top">
                                            <tr class="table-primary sticky-table-header">



                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                                    Name
                                                </th>
                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                                    IC/PP
                                                </th>
                                                <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                                    Code
                                                </th>


                                                <th style="text-align:right">
                                                    Total Amount
                                                </th>
                                                <th style="text-align:right">
                                                    Company Cost
                                                </th>

                                                <th>
                                                    Actual Amount <br> (Manual Input)
                                                </th>

                                                <th style="background-color:darkred">
                                                    Current Balance
                                                </th>



                                                <th style="background-color:darkred">
                                                    Toal advance taken
                                                </th>
                                                <th style="background-color:darkseagreen">
                                                    Advance Payed Back
                                                </th>
                                                <th style="background-color:darkblue">
                                                    Advance Balance
                                                </th>

                                                <th class="table-success">
                                                    Actual Dispatch (To be)
                                                </th>



                                                <th style="text-align:center">

                                                </th>


                                            </tr>
                                        </thead>

                                        <tbody>
                                    @foreach (var e in dispatchList)
                                    {
                                                    <tr>

                                                        <td>
                                                @e.FirstName&nbsp;@e.LastName
                                                        </td>
                                                        <td>
                                                @e.IcPp
                                                        </td>
                                                        <td>
                                                @e.EmployeeCode
                                                        </td>

                                                        <td style="text-align:right">
                                                @String.Format("{0:0.##}", CalculateTotalSalary(e)[0])

                                                        </td>
                                                        <td style="text-align:right">
                                                @String.Format("{0:0.##}", CalculateTotalSalary(e)[1])

                                                        </td>



                                                        <td>
                                                @if (calculateTotalPayable(total: CalculateTotalSalary(e)[0], Balance: calcluateBlance(e), totalAdvanceTaken: totalAdvancedByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum, totalAdvancePaid: TotalAdvancedPaybackByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum) == 0)
                                                {
                                                                   <input class="form-control" placeholder="Actual Amount" @bind="depatches.FirstOrDefault(x=>x.EmplyeeId==e.Id).ActualAmount" disabled>
                                                }
                                                else
                                                {
                                                                    <input class="form-control" placeholder="Actual Amount" @bind="depatches.FirstOrDefault(x=>x.EmplyeeId==e.Id).ActualAmount">
                                                }




                                                        </td>

                                                        <td>

                                                @String.Format("{0:0.##}", calcluateBlance(e))

                                                        </td>




                                                        <td>


                                                @totalAdvancedByEmployees.FirstOrDefault(x=>x.EmployeeId == e.Id)?.Sum


                                                        </td>
                                                        <td>

                                                @TotalAdvancedPaybackByEmployees.FirstOrDefault(x=>x.EmployeeId == e.Id)?.Sum



                                                        </td>
                                                        <td>
                                                @if (TotalAdvancedPaybackByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id) == null)
                                                {
                                                    @totalAdvancedByEmployees.FirstOrDefault(x=>x.EmployeeId == e.Id)?.Sum
                                                }
                                                else
                                                {
                                                    @(totalAdvancedByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum - TotalAdvancedPaybackByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum)
                                                }


                                                        </td>

                                                        <td>

                                                @String.Format("{0:0.##}", calculateTotalPayable(total:CalculateTotalSalary(e)[0],Balance:calcluateBlance(e),totalAdvanceTaken:totalAdvancedByEmployees.FirstOrDefault(x=>x.EmployeeId == e.Id)?.Sum,totalAdvancePaid:TotalAdvancedPaybackByEmployees.FirstOrDefault(x=>x.EmployeeId == e.Id)?.Sum))




                                                        </td>


                                                        <td style="text-align:center">


                                                            <button class="btn btn-danger" @onclick="()=> dispatchList.Remove(e)"> <span class="oi oi-delete" aria-hidden="true"></span></button>


                                                        </td>


                                                    </tr>
                                    }

                                        </tbody>
                                    </table>
                                </Animate>


                            </div>


                        </div>


                    </div>







                </div>
    }
    else
    {
                <div class="container-fluid">
                    <div class="col">
                        <img src="download.jpg" class="img-fluid" alt="Responsive image">
                    </div>
                </div>
    }




}


@code {

    bool loading = false;
    bool isShowingLoading = false;
    bool showing = false;
    bool isSavingDitchpatch = false;
    bool featchingData = false;

    Logger logger = new Logger();
    string rollId = string.Empty;

    List<Employee> employeeList = new List<Employee>();
    List<Employee> employeeListSearched = new List<Employee>();
    public static List<Employee> dispatchList = new List<Employee>();

    List<Depatch> depatches = new List<Depatch>();
    List<Depatch> depatchesDB = new List<Depatch>();

    List<Roll> rolls = new List<Roll>();
    List<ViewAdvancedByEmployee> totalAdvancedByEmployees = new List<ViewAdvancedByEmployee>();
    List<ViewAdvancedPaybackByEmployee> TotalAdvancedPaybackByEmployees = new List<ViewAdvancedPaybackByEmployee>();


    Employee? SelectedEmployee;

    DateOnly selectedMonth = DateOnly.FromDateTime(DateTime.Now);

    DateTime monthYear = DateTime.Now;

    bool isList = true;

    List<Payroll> payrolls = new List<Payroll>();
    List<Deduction> deductions = new List<Deduction>();

    List<PayrollByMonthStuff> payrollByMonthStuffs = new List<PayrollByMonthStuff>();
    [CascadingParameter] Blazored.Modal.Services.IModalService Modal { get; set; } = default!;

    List<WorkerWorkingHour>? workerWorkingHours;
    List<Extradeduction>? extradeductions;
    List<ExtraEarn>? extraEarns;
    List<Payrolldeductionschema>? schemas;
    List<Epclocal>? EpFlocals;
    List<EpfForeign>? EpfForeigns;
    List<Sosco>? soscos;
    List<WorkerHourlyRate>? workerHourlyRates;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);

        rollId = await localStorage.GetItemAsync<string>("Roll");

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {

            rolls = await dbcontext.Rolls.ToListAsync();

            payrolls = await dbcontext.Payrolls.ToListAsync();

            deductions = await dbcontext.Deductions.ToListAsync();


            employeeList = await dbcontext.Employees.Where(x => x.Level == "Staff" && x.Active == true).OrderByDescending(x => x.Active).ThenBy(x => x.FirstName).ToListAsync();

            employeeListSearched = employeeList;

            dispatchList = employeeList.ToList();

            payrollByMonthStuffs = await dbcontext.PayrollByMonthStuffs.ToListAsync();
            var firstDayOfMonth = new DateTime(selectedMonth.Year, selectedMonth.Month, 1);
            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

            workerWorkingHours = await dbcontext.WorkerWorkingHours.ToListAsync();
            extradeductions = await dbcontext.Extradeductions.ToListAsync();
            extraEarns = await dbcontext.ExtraEarns.ToListAsync();

            schemas = await dbcontext.Payrolldeductionschemas.Where(x => x.SinceDate <= selectedMonth && (x.EndDate >= selectedMonth || x.EndDate == null)).ToListAsync();

           // totalAdvancedByEmployees = await dbcontext.ViewAdvancedByEmployees.ToListAsync();

         //   TotalAdvancedPaybackByEmployees = await dbcontext.ViewAdvancedPaybackByEmployees.ToListAsync();

            EpFlocals = await dbcontext.Epclocals.ToListAsync();
            EpfForeigns = await dbcontext.EpfForeigns.ToListAsync();
            soscos = await dbcontext.Soscos.ToListAsync();

            workerHourlyRates = await dbcontext.WorkerHourlyRates.ToListAsync();

            depatchesDB = await dbcontext.Depatches.ToListAsync();

            foreach (Employee e in employeeList)
            {
                Depatch d = new Depatch()
                    {
                        EmplyeeId = e.Id
                    };

                depatches.Add(d);
            }

        }


        loading = false;
        await InvokeAsync(StateHasChanged);

    }

    void searchEmployee(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched = employeeList.Where(x =>

            (x.FirstName != null &&
            x.LastName != null &&
            x.EmployeeCode != null &&
            x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }

    async Task ditchpatch()
    {
        isSavingDitchpatch = true;
        await InvokeAsync(StateHasChanged);
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {




            payrollByMonthStuffs = this.payrollByMonthStuffs.Where(x => x.Month == selectedMonth).ToList();
            var firstDayOfMonth = new DateTime(selectedMonth.Year, selectedMonth.Month, 1);
            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

            List<WorkerWorkingHour>? workerWorkingHours = this.workerWorkingHours?.Where(x => x.Date >= DateOnly.FromDateTime(firstDayOfMonth) && x.Date <= DateOnly.FromDateTime(lastDayOfMonth)).ToList();
            List<Extradeduction>? extradeductions = this.extradeductions?.Where(x => x.Date.Value.Month == selectedMonth.Month && x.Date.Value.Year == selectedMonth.Year).ToList();
            List<ExtraEarn>? extraEarns = this.extraEarns?.Where(x => x.Date.Value.Month == selectedMonth.Month && x.Date.Value.Year == selectedMonth.Year).ToList();

            List<Payrolldeductionschema> schemas = this.schemas.Where(x => x.SinceDate <= selectedMonth && (x.EndDate >= selectedMonth || x.EndDate == null)).ToList();

            if (schemas != null)
            {
                payrolls = this.payrolls.Where(x => schemas.Any(y => y.Id == x.SchemaId)).OrderBy(x => x.Type).ToList();
                deductions = this.deductions.Where(x => schemas.Any(y => y.Id == x.SchemaId)).OrderBy(x => x.Type).ToList();
            }
            else
            {
                payrolls = null;
                deductions = null;

            }

            List<Epclocal>? EpFlocals = this.EpFlocals.ToList();
            List<EpfForeign>? EpfForeigns = this.EpfForeigns.ToList();
            List<Sosco> soscos = this.soscos.ToList();

            foreach (Employee e in dispatchList)
            {

                double total = 0;
                double companyCost = 0;

                Depatch d = new Depatch
                    {
                        Id = Guid.NewGuid(),
                        EmplyeeId = e.Id,
                        Month = selectedMonth,
                    };


                //stuff salary....................................................................................................................................
                if (e.Level == "Staff")
                {

                    if (payrolls != null)
                    {
                        foreach (var p in payrolls.Where(x => x.EmployeeId == e.Id))
                        {
                            if (p.Amount != null)
                            {

                                DistchpatchField df = new DistchpatchField()
                                    {
                                        Id = Guid.NewGuid(),
                                        Name = p.Name,
                                        DitchpathId = d.Id,
                                        Amount = p.Amount,
                                        Isearning = true

                                    };

                                dbcontext.DistchpatchFields.Add(df);

                                total = total + p.Amount.Value;

                            }

                        }
                    }



                    if (payrollByMonthStuffs != null)
                    {
                        foreach (var pm in payrollByMonthStuffs.Where(x => x.EmployeeId == e.Id))
                        {
                            DistchpatchField df = new DistchpatchField()
                                {
                                    Id = Guid.NewGuid(),
                                    Name = pm.FieldName,
                                    DitchpathId = d.Id,
                                    Amount = pm.Amount,
                                    Isearning = pm.Earning

                                };
                            dbcontext.DistchpatchFields.Add(df);

                            if (pm.Earning == true)
                            {
                                total = total + pm.Amount.Value;
                            }
                            else
                            {
                                total = total - pm.Amount.Value;
                            }

                        }
                    }


                    if (deductions != null)
                    {
                        foreach (var p in deductions.Where(x => x.Employeeid == e.Id))
                        {
                            if (p.Amount != null)
                            {
                                DistchpatchField df = new DistchpatchField()
                                    {
                                        Id = Guid.NewGuid(),
                                        Name = p.Name,
                                        DitchpathId = d.Id,
                                        Amount = p.Amount,
                                        Isearning = false

                                    };
                                dbcontext.DistchpatchFields.Add(df);

                                total = total - p.Amount.Value;

                            }

                        }
                    }

                    companyCost = total;


                    if (e.Nationality == "Malaysia")
                    {

                        var epf = EpFlocals.FirstOrDefault(x => total >= x.From && total <= x.To);
                        if (epf != null)
                        {
                            DistchpatchField distchpatchField = new DistchpatchField
                                {

                                    Id = Guid.NewGuid(),
                                    Name = $"EPF Local",
                                    Amount = epf.ByTheEmployee.Value,
                                    DitchpathId = d.Id,
                                    Isearning = false

                                };

                            dbcontext.DistchpatchFields.Add(distchpatchField);

                            companyCost = companyCost + epf.ByTheEnployeer.Value;

                            total = total - epf.ByTheEmployee.Value;

                        }

                    }
                    else
                    {
                        var epf = EpfForeigns.FirstOrDefault(x => total >= x.From && total <= x.To);
                        if (epf != null)
                        {
                            DistchpatchField distchpatchField = new DistchpatchField
                                {

                                    Id = Guid.NewGuid(),
                                    Name = $"EPF Foraign",
                                    Amount = epf.ByTheEmployee.Value,
                                    DitchpathId = d.Id,
                                    Isearning = false

                                };

                            dbcontext.DistchpatchFields.Add(distchpatchField);

                            companyCost = companyCost + epf.ByTheEnployeer.Value;

                            total = total - epf.ByTheEmployee.Value;



                        }
                    }

                    var sosco = soscos.FirstOrDefault(x => total >= x.From && total < x.To);


                    if (sosco != null)
                    {
                        DistchpatchField distchpatchField = new DistchpatchField
                            {

                                Id = Guid.NewGuid(),
                                Name = $"SOSCO",
                                Amount = sosco.EmployeeContribution.Value,
                                DitchpathId = d.Id,
                                Isearning = false

                            };

                        dbcontext.DistchpatchFields.Add(distchpatchField);
                        total = total - sosco.EmployeeContribution.Value;

                        companyCost = companyCost + sosco.EmployersContribution.Value; ;

                    }


                }





                //Worker salary....................................................................................................................................
               

                d.TotalAmount = total;

                d.CompanyCost = companyCost;



                if (depatches.FirstOrDefault(x => x.EmplyeeId == e.Id)?.ActualAmount != null)
                {
                    d.ActualAmount = depatches.FirstOrDefault(x => x.EmplyeeId == e.Id)?.ActualAmount;
                }
                else
                {
                    d.ActualAmount = total;
                }


                var payabletotal = calculateTotalPayable(total: CalculateTotalSalary(e)[0], Balance: calcluateBlance(e), totalAdvanceTaken: totalAdvancedByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum, totalAdvancePaid: TotalAdvancedPaybackByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum);



                var totalAdvancePaid = TotalAdvancedPaybackByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum;
                var totalAdvanceTaken = totalAdvancedByEmployees.FirstOrDefault(x => x.EmployeeId == e.Id)?.Sum;

                if (totalAdvanceTaken - totalAdvancePaid >= d.TotalAmount)
                {
                    d.ActualAmount = 0.00;
                    d.RemainingAmount = 0.00;
                }
                else
                {

                    d.RemainingAmount = payabletotal - d.ActualAmount;


                }



                d.RemainingAmount = total - d.ActualAmount;



                AdvancePayback advancePayback = new AdvancePayback()
                    {
                        Id = Guid.NewGuid(),
                        EmployeeId = e.Id,
                        Date = DateOnly.FromDateTime(DateTime.Today)

                    };







                dbcontext.Depatches.Add(d);


            }



            await dbcontext.SaveChangesAsync();


        }


        isSavingDitchpatch = false;
        await InvokeAsync(StateHasChanged);

        var parameters = new ModalParameters().Add(nameof(ToReportModal.Message), "Dispatch Salary Task Completed");

        parameters.Add(nameof(ToReportModal.Navlink), $"/SalarayReport/{selectedMonth.ToString("yyyy-MM-dd")}");

        var modal = Modal.Show<ToReportModal>("Confimation", parameters);

    }

    double? calcluateBlance(Employee e)
    {

        return depatchesDB.Where(x => x.EmplyeeId == e.Id).Select(x => x.TotalAmount).Sum() - depatchesDB.Where(x => x.EmplyeeId == e.Id).Select(x => x.ActualAmount).Sum();

    }

  






    async void print()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);

       

        nav.NavigateTo($"/print");

        loading = false;
        await InvokeAsync(StateHasChanged);

    }




    double? CalculateTotalEarning(Employee e)
    {
        double? total = payrolls.Where(x => x.EmployeeId == e.Id).Select(x => x.Amount).Sum(); //.ToString("F", CultureInfo.InvariantCulture);

        foreach (var pm in payrollByMonthStuffs.Where(x => x.EmployeeId == e.Id && x.Earning == true))
        {
            total = total + pm.Amount;
        }

        return total;
    }

    double? CalculateTotalDeductions(Employee e)
    {
        double? total = deductions.Where(x => x.Employeeid == e.Id).Select(x => x.Amount).Sum();//?.ToString("F", CultureInfo.InvariantCulture)

        foreach (var pm in payrollByMonthStuffs.Where(x => x.EmployeeId == e.Id && x.Earning != true))
        {
            total = total - pm.Amount;
        }

        return total;
    }




    //..total payable calculation.....................................................................................................................................



    double? calculateTotalPayable(double? total, double? Balance, double? totalAdvanceTaken, double? totalAdvancePaid)
    {
        double? advanceBalance = 0.00;

        if (totalAdvancePaid != null && totalAdvanceTaken != null)
        {
            advanceBalance = totalAdvanceTaken - totalAdvancePaid;
        }
        else if (totalAdvancePaid == null && totalAdvanceTaken != null)
        {
            advanceBalance = totalAdvanceTaken;
        }

        if (total + Balance - advanceBalance < 0)
        {
            return 0;
        }

        return total + Balance - advanceBalance;

    }






    List<double> CalculateTotalSalary(Employee e)
    {

        List<double> totals = new List<double>();

        double companyCost = 0;

        double total = 0;


        payrollByMonthStuffs = this.payrollByMonthStuffs.Where(x => x.Month == selectedMonth).ToList();
        var firstDayOfMonth = new DateTime(selectedMonth.Year, selectedMonth.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        List<WorkerWorkingHour>? workerWorkingHours = this.workerWorkingHours?.Where(x => x.Date >= DateOnly.FromDateTime(firstDayOfMonth) && x.Date <= DateOnly.FromDateTime(lastDayOfMonth)).ToList();
        List<Extradeduction>? extradeductions = this.extradeductions?.Where(x => x.Date.Value.Month == selectedMonth.Month && x.Date.Value.Year == selectedMonth.Year).ToList();
        List<ExtraEarn>? extraEarns = this.extraEarns?.Where(x => x.Date.Value.Month == selectedMonth.Month && x.Date.Value.Year == selectedMonth.Year).ToList();

        List<Payrolldeductionschema> schemas = this.schemas.Where(x => x.SinceDate <= selectedMonth && (x.EndDate >= selectedMonth || x.EndDate == null)).ToList();

        if (schemas != null)
        {
            payrolls = this.payrolls.Where(x => schemas.Any(y => y.Id == x.SchemaId)).OrderBy(x => x.Type).ToList();
            deductions = this.deductions.Where(x => schemas.Any(y => y.Id == x.SchemaId)).OrderBy(x => x.Type).ToList();
        }
        else
        {
            payrolls = null;
            deductions = null;

        }

        List<Epclocal>? EpFlocals = this.EpFlocals.ToList();
        List<EpfForeign>? EpfForeigns = this.EpfForeigns.ToList();
        List<Sosco> soscos = this.soscos.ToList();





        //stuff salary....................................................................................................................................
        if (e.Level == "Staff")
        {

            if (payrolls != null)
            {
                foreach (var p in payrolls.Where(x => x.EmployeeId == e.Id))
                {
                    if (p.Amount != null)
                    {

                        total = total + p.Amount.Value;

                    }

                }
            }



            if (payrollByMonthStuffs != null)
            {
                foreach (var pm in payrollByMonthStuffs.Where(x => x.EmployeeId == e.Id))
                {

                    if (pm.Earning == true)
                    {
                        total = total + pm.Amount.Value;
                    }
                    else
                    {
                        total = total - pm.Amount.Value;
                    }

                }
            }


            if (deductions != null)
            {
                foreach (var p in deductions.Where(x => x.Employeeid == e.Id))
                {
                    if (p.Amount != null)
                    {

                        total = total - p.Amount.Value;


                    }

                }

            }

            companyCost = total;

            if (e.Nationality == "Malaysia")
            {

                var epf = EpFlocals.FirstOrDefault(x => total >= x.From && total <= x.To);
                if (epf != null)
                {


                    companyCost = companyCost + epf.ByTheEnployeer.Value;

                    //   total = total - epf.ByTheEmployee.Value;

                }

            }
            else
            {
                var epf = EpfForeigns.FirstOrDefault(x => total >= x.From && total <= x.To);
                if (epf != null)
                {


                    companyCost = companyCost + epf.ByTheEnployeer.Value;

                    // total = total - epf.ByTheEmployee.Value;



                }
            }

            var sosco = soscos.FirstOrDefault(x => total >= x.From && total < x.To);


            if (sosco != null)
            {

                // total = total - sosco.EmployeeContribution.Value;

                companyCost = companyCost + sosco.EmployersContribution.Value; ;

            }



        }
        //Worker salary....................................................................................................................................
    





        totals.Add(total);
        totals.Add(companyCost);






        return totals;
    }

    protected double? calculateaPAmount(double? mainAmount, double? percentage)
    {
        return (percentage / 100) * mainAmount;
    }
}

