@page "/rawFingewr"

@using BlazorInputFile
@using LumenWorks.Framework.IO.Csv;
@using System.Data;
@using System.IO;
@using System.Globalization;
@using System;
@using Microsoft.EntityFrameworkCore
@using BismillahSealConsultant.Service
@inject IFileUpload fileUpload
@using System.Data.SqlClient
@using ViewModels

@if (_isloading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden"></span>
    </div>
}
else
{

    <div class="container-fluid">
        <div class="row ">

            <div class="col-6">

                <div class="input-group">
                    @if (groups != null)
                    {
                        <select class="form-select form-select-sm" aria-label=".form-select-sm example" @onchange="(ChangeEventArgs e)=>{ onGroupSelected(Guid.Parse(e?.Value?.ToString())); }">


                            <option selected disabled>CLick to select the Group</option>

                            @foreach (var g in groups)
                            {
                                <option value="@g.Id"> @g.GroupName </option>
                            }
                        </select>
                        @if (_isFacingEMployees)
                        {
                            <button class="btn btn-sm btn-outline-primary">

                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden"></span>
                                </div>

                            </button>
                        }

                    }
                    @if (workingHourRuleSchemas != null && selectedGroup != null)
                    {
                        <select class="form-select form-select-sm" aria-label=".form-select-sm example" @onchange="(ChangeEventArgs e)=>{ onRuleSchemaSelected(Guid.Parse(e?.Value?.ToString())); }">


                            <option selected disabled>CLick to select the Rule</option>

                            @foreach (var w in workingHourRuleSchemas)
                            {
                                <option value="@w.SchemaId"> @w.RuleName </option>
                            }
                        </select>
                        @if (_isFacingrules)
                        {
                            <button class="btn btn-sm btn-outline-primary">

                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden"></span>
                                </div>

                            </button>
                        }

                    }
                    @if (SelectedSchema != null)
                    {

                        <input type="date" class="form-control" @onchange="(ChangeEventArgs e) =>  ondateSelect(e)" />

                        if (_isdateLoading)
                        {
                            <button class="btn btn-sm btn-outline-primary">

                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden"></span>
                                </div>

                            </button>
                        }

                    }

                    @if (groups != null && workingHourRuleSchemas != null && selectedGroup != null && SelectedSchema != null && selectedDate != null)
                    {
                        <button class="btn btn-outline-success" @onclick="calcluateAll">Calculate </button>

                        @if (_isSaving)
                        {
                            <button class="btn btn-sm btn-outline-primary">

                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden"></span>
                                </div>

                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-primary" @onclick="save">Save</button>
                        }
                    }





                </div>



            </div>
            <div class="col-md-3 align-content-end">
                <input class="form-control" type="search" @onchange="(ChangeEventArgs e)=>onSearch(e)" placeholder="Seach by Employee code" />
            </div>
            <div class="col-6">
                @if (workerPaymentDetailsBydatesnotAdded != null)
                {
                    <h6>The following employee attendance data alread exists in the Database</h6>


                    <p>
                        @foreach (var w in workerPaymentDetailsBydatesnotAdded)
                        {

                            <abbr style="border-bottom: none !important;text-decoration: none !important;" title="@employees.FirstOrDefault(x => x.Id == w.EmployeeId)?.FirstName @employees.FirstOrDefault(x => x.Id == w.EmployeeId)?.LastName Hour- @w.TotalHours Earned- @w.TotalEarnedOnDate">@employees.FirstOrDefault(x => x.Id == w.EmployeeId)?.EmployeeCode &nbsp;</abbr>

                        }

                    </p>








                }
            </div>

        </div>
        <hr />
        <div class="row my-1">
            <div class="col-md-12">


                <table class="table table-responsive table-sm table-striped table-bordered table-responsive">
                    <thead class="table-secondary">
                        <tr>
                            <th class="bg-secondary text-white">
                                Employee
                            </th>
                            <th class="bg-secondary text-white">
                                Date
                            </th>
                            <th class="bg-secondary text-white">
                                In Time Actual
                            </th>
                            <th class="bg-secondary text-white">
                                Out Time Actual
                            </th>

                            <th class="bg-secondary text-white">
                                In Time
                            </th>
                            <th class="bg-secondary text-white">
                                Out Time
                            </th>
                            <th class="bg-secondary text-white">
                                On site
                            </th>
                            <th class="bg-secondary text-white">
                                Break Time
                            </th>

                            <th class="bg-secondary text-white">
                                Working Hours
                            </th>
                            <th class="bg-secondary text-white">
                                Regular Hours
                            </th>
                            <th class="bg-secondary text-white">
                                Over Time (Actual)
                            </th>
                            <th class="bg-secondary text-white">
                                Over Time (Extra)
                            </th>
                            <th class="bg-secondary text-white">
                                Total Hours
                            </th>
                            <th class="bg-secondary text-white">
                                Rate/Hour
                            </th>
                            <th class="bg-secondary text-white">
                                Total Amount
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (workerPaymentDetailsBydatesFiltered != null)
                        {
                            @foreach (var e in workerPaymentDetailsBydatesFiltered)
                            {
                                <tr>
                                    <td>

                                        <h6>@employees?.FirstOrDefault(x => x.Id == e.EmployeeId)?.FirstName @employees?.FirstOrDefault(x => x.Id == e.EmployeeId)?.LastName (@employees?.FirstOrDefault(x => x.Id == e.EmployeeId)?.EmployeeCode)</h6>

                                    </td>
                                    <td>
                                        @e.Date
                                    </td>
                                    <td>
                                        <input class="form-control" type="datetime-local" @bind=e.IntimeActual />
                                    </td>
                                    <td>
                                        <input class="form-control" type="datetime-local" @bind=e.OutTimeActual />
                                    </td>


                                    <td>
                                        @e.InTime
                                    </td>
                                    <td>
                                        @e.OutTime
                                    </td>
                                    <td class="text-primary">
                                        @FormatTimeSpanAsHoursAndMinutes(e.OnSite)
                                    </td>

                                    <td class="text-danger">
                                        @FormatTimeSpanAsHoursAndMinutes(e.BreakTime)
                                    </td>


                                    <td class="text-primary">
                                        @FormatTimeSpanAsHoursAndMinutes(e.ActualHours)
                                    </td>
                                    <td class="text-success">
                                        @if (e.ActualHours > overtimeWorkingHour?.StartAfter)
                                        {
                                            @overtimeWorkingHour.StartAfter

                                        }
                                        else
                                        {
                                            @e.ActualHours
                                        }

                                    </td>
                                    <td class="text-success">
                                        @FormatTimeSpanAsHoursAndMinutes(e.OverTime)
                                    </td>
                                    <td class="text-success">
                                        @FormatTimeSpanAsHoursAndMinutes(e.OtExtraHours)
                                    </td>
                                    <td class="text-success">

                                        <h5 style="color:darkgreen">@FormatTimeSpanAsHoursAndMinutes(e.TotalHours)</h5>
                                    </td>
                                    <td class="text-primary">
                                        @e.RatePerHour
                                    </td>
                                    <td class="text-dark">
                                        <h5>@e.TotalEarnedOnDate</h5>
                                    </td>

                                </tr>
                            }
                        }

                    </tbody>


                </table>




            </div>


        </div>

    </div>
}










@code {
    bool _isFacingEMployees = false;
    bool _isFacingrules = false;
    bool _isSaving = false;
    bool _isloading = true;
    bool _isdateLoading = false;
    bool _isSearching = false;

    List<Employee> employees = new List<Employee>();

    List<Employee> employeesInGroup = new List<Employee>();

    List<Employee>? EmployeeIntheGroup;

    List<EmployeeWithLatestRate>? employeeWithLatestRates;



    List<WorkerPaymentDetailsBydate>? workerPaymentDetailsBydatesnotAdded;

    //..................................................................................................

    List<EntryTime> EntryTimeslots = new List<EntryTime>();
    List<ExitTime> ExitTimeslots = new List<ExitTime>();
    List<BreakTime> breakTimes = new List<BreakTime>();

    List<WorkingHourRuleSchema>? workingHourRuleSchemas;

    WorkingHourRuleSchema? SelectedSchema;

    OvertimeWorkingHour? overtimeWorkingHour;

    //..................................................................................................


    List<WorkerPaymentDetailsBydate> workerPaymentDetailsBydates = new List<WorkerPaymentDetailsBydate>();
    List<WorkerPaymentDetailsBydate>? workerPaymentDetailsBydatesFiltered;
    List<Group>? groups;

    Group? selectedGroup;

    DateOnly? selectedDate;

    protected override async Task OnInitializedAsync()
    {


        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {


            employees = await dbcontext.Employees.ToListAsync();

            groups = await dbcontext.Groups.ToListAsync();

            workingHourRuleSchemas = await dbcontext.WorkingHourRuleSchemas.ToListAsync();

            employeeWithLatestRates = await dbcontext.EmployeeWithLatestRates.ToListAsync();
        }



        _isloading = false;




    }


    void calcluateAll()
    {
        @foreach (var e in workerPaymentDetailsBydates)
        {
            caluculate(e.Id);
        }
    }



    //.........................calculation is here..................................................................................................................

    void caluculate(Guid WorkerPaymentDetailsId)
    {
        if (SelectedSchema != null)
        {
            var spd = workerPaymentDetailsBydates.FirstOrDefault(x => x.Id == WorkerPaymentDetailsId);

            var employee = employees.FirstOrDefault(x => x.Id == spd.EmployeeId);

            if (spd != null && spd.IntimeActual != null && spd.OutTimeActual != null)
            {



                foreach (var intime in EntryTimeslots)
                {

                    if (TimeOnly.FromDateTime(spd.IntimeActual.Value) > intime.StartTine && TimeOnly.FromDateTime(spd.IntimeActual.Value) <= intime.EndTime)
                    {

                        string Entry = $"{spd.IntimeActual.Value.ToString("MM/dd/yyyy")} {intime.TakenTime}";

                        Console.WriteLine(Entry);

                        spd.InTime = DateTime.Parse(Entry);


                    }


                }

                foreach (var Outtime in ExitTimeslots)
                {
                    if (TimeOnly.FromDateTime(spd.OutTimeActual.Value) > Outtime.StartTine && TimeOnly.FromDateTime(spd.OutTimeActual.Value) <= Outtime.EndTime)
                    {

                        string Exit = $"{spd.OutTimeActual.Value.Date.ToString("MM/dd/yyyy")} {Outtime.TakenTime}";

                        Console.WriteLine(Exit);

                        spd.OutTime = DateTime.Parse(Exit);


                    }


                }

                spd.OnSite = spd.OutTime - spd.InTime;

                spd.ActualHours = spd.OnSite;

                spd.BreakTime = new TimeSpan(0, 0, 0, 0);
                Console.WriteLine($"mew...................................................................................");
                foreach (var bt in breakTimes)
                {


                    Console.WriteLine($"{bt.StartTime} - {bt.EndTime}");

                    spd.ActualHours = spd.ActualHours - DeductBreakTimeAcrossMultipleDays(spd.InTime, spd.OutTime, bt.StartTime, bt.EndTime);

                    spd.BreakTime = spd.BreakTime + DeductBreakTimeAcrossMultipleDays(spd.InTime, spd.OutTime, bt.StartTime, bt.EndTime);

                    Console.WriteLine($"{DeductBreakTimeAcrossMultipleDays(spd.InTime, spd.OutTime, bt.StartTime, bt.EndTime)}");
                }

                if (spd.ActualHours > overtimeWorkingHour.StartAfter)
                {
                    spd.OverTime = spd.ActualHours - overtimeWorkingHour.StartAfter;
                }
                else
                {
                    spd.OverTime = new TimeSpan(0, 0, 0, 0);
                }


                spd.OtExtraHours = ConvertTimeSpan(overtimeWorkingHour.IcreamentCount, spd.OverTime) - spd.OverTime;

                spd.TotalHours = spd.ActualHours + spd.OtExtraHours;

                spd.TotalHours = RoundToNearestHalfHour(spd.TotalHours);

                var rate = employeeWithLatestRates.FirstOrDefault(x => x.EmployeeId == employee.Id);

                if (rate != null && rate.LatestRate != null)
                {
                    spd.RatePerHour = (decimal)rate.LatestRate;
                }


                spd.TotalEarnedOnDate = CalculatePayment(spd.TotalHours, spd.RatePerHour);

                spd.SchemaId = SelectedSchema.SchemaId;

                StateHasChanged();


            }
        }
        else
        {

        }


    }


    TimeSpan? RoundToNearestHalfHour(TimeSpan? time)
    {
        if (!time.HasValue)
        {
            return null; // Return null if the input TimeSpan is null
        }

        int minutes = time.Value.Minutes;
        int baseMinutes = (minutes / 30) * 30; // Get the nearest lower multiple of 30
        int roundedMinutes = minutes % 30 >= 15 ? baseMinutes + 30 : baseMinutes; // Round to nearest 30
        int additionalHours = roundedMinutes == 60 ? 1 : 0;
        return new TimeSpan(time.Value.Hours + additionalHours, roundedMinutes % 60, 0);
    }








    decimal? CalculatePayment(TimeSpan? timeWorked, decimal? hourlyRate)
    {
        // Check if either parameter is null
        if (!timeWorked.HasValue || !hourlyRate.HasValue)
        {
            // One or both parameters are null, so we cannot calculate the payment
            return null;
        }

        // Convert the TimeSpan to total hours as a double, then cast to decimal
        decimal hoursWorked = (decimal)timeWorked.Value.TotalHours;

        // Calculate the payment
        decimal payment = hoursWorked * hourlyRate.Value;

        return payment;
    }



    TimeSpan? ConvertTimeSpan(TimeSpan? specificTimeSpan, TimeSpan? totalTime)
    {
        // Check if any of the parameters is null
        if (specificTimeSpan == null || totalTime == null)
        {
            return null;
        }

        // Calculate the conversion factor by dividing the total minutes of totalTime by 60 (to convert to hours)
        double conversionFactor = ((TimeSpan)totalTime).TotalMinutes / 60;

        // Convert the specificTimeSpan hours to the new time span using the conversion factor
        double newHours = ((TimeSpan)specificTimeSpan).TotalHours * conversionFactor;

        // Convert the fractional hours back to a TimeSpan
        TimeSpan result = TimeSpan.FromHours(newHours);

        return result;
    }

    TimeSpan? DeductBreakTimeAcrossMultipleDays(DateTime? inTime, DateTime? outTime, TimeOnly? breakStart, TimeOnly? breakEnd)
    {
        // Check for null values and handle them as needed
        if (!inTime.HasValue || !outTime.HasValue || !breakStart.HasValue || !breakEnd.HasValue)
        {
            // Return null or throw an exception or handle it as per your requirement
            return null; // Indicating that deduction can't be calculated
        }

        // Initialize totalDeduction
        TimeSpan totalDeduction = TimeSpan.Zero;

        // The first day's date
        DateTime currentDate = inTime.Value.Date;

        // Continue until we've covered all days up to and including the outTime's date
        while (currentDate <= outTime.Value.Date)
        {
            // For the first day, use inTime, and for subsequent days, use the start of the day
            TimeOnly currentDayInTime = currentDate == inTime.Value.Date ? TimeOnly.FromDateTime(inTime.Value) : TimeOnly.MinValue;

            // For the last day, use outTime, and for previous days, use the end of the day
            TimeOnly currentDayOutTime = currentDate == outTime.Value.Date ? TimeOnly.FromDateTime(outTime.Value) : TimeOnly.MaxValue;

            // Deduct break time for the current day if the work period overlaps with the break time
            if (!(currentDayOutTime <= breakStart.Value || currentDayInTime >= breakEnd.Value))
            {
                if (currentDayInTime <= breakStart.Value && currentDayOutTime >= breakEnd.Value)
                {
                    // Deduct entire break duration
                    totalDeduction += breakEnd.Value - breakStart.Value;
                }
                else if (currentDayInTime >= breakStart.Value && currentDayOutTime <= breakEnd.Value)
                {
                    // Deduct the duration between in-time and out-time
                    totalDeduction += currentDayOutTime - currentDayInTime;
                }
                else if (currentDayInTime <= breakStart.Value && currentDayOutTime <= breakEnd.Value)
                {
                    // Deduct the duration between breakStart and out-time
                    totalDeduction += currentDayOutTime - breakStart.Value;
                }
                else if (currentDayInTime >= breakStart.Value && currentDayOutTime >= breakEnd.Value)
                {
                    // Deduct the duration between in-time and breakEnd
                    totalDeduction += breakEnd.Value - currentDayInTime;
                }
            }

            // Move to the next day
            currentDate = currentDate.AddDays(1);
        }

        return totalDeduction;
    }



    string FormatTimeSpanAsHoursAndMinutes(TimeSpan? timeSpan)
    {
        // Check if the input is null
        if (!timeSpan.HasValue)
        {
            return ""; // Or any other default value you prefer
        }

        // Calculate total hours and get minutes from the non-null TimeSpan
        int totalHours = (int)Math.Floor(timeSpan.Value.TotalHours);
        int minutes = timeSpan.Value.Minutes;

        // Format and return the string
        return $"{totalHours:00}:{minutes:00}";
    }

    //...................................................................................................................................

    async Task onRuleSchemaSelected(Guid id)
    {
        _isFacingrules = true;
        await InvokeAsync(StateHasChanged);
        SelectedSchema = workingHourRuleSchemas?.FirstOrDefault(x => x.SchemaId == id);



        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            EntryTimeslots = await dbcontext.EntryTimes.Where(x => x.SchemaId == SelectedSchema.SchemaId).ToListAsync();
            ExitTimeslots = await dbcontext.ExitTimes.Where(x => x.SchemaId == SelectedSchema.SchemaId).ToListAsync();
            breakTimes = await dbcontext.BreakTimes.Where(x => x.SchemaId == SelectedSchema.SchemaId).ToListAsync();
            overtimeWorkingHour = await dbcontext.OvertimeWorkingHours.FirstOrDefaultAsync(x => x.SchemaId == SelectedSchema.SchemaId);
            await InvokeAsync(StateHasChanged);


        }




        _isFacingrules = false;
        await InvokeAsync(StateHasChanged);
    }


    async Task onGroupSelected(Guid id)
    {
        _isFacingEMployees = true;
        await InvokeAsync(StateHasChanged);

        selectedGroup = groups?.FirstOrDefault(x => x.Id == id);



        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            var existingEmployeesInTheGroup = await dbcontext.GroupEmployees.Where(x => x.GroupId == id).ToListAsync();

            employeesInGroup = new List<Employee>();

            foreach (var e in existingEmployeesInTheGroup)
            {
                var x = employees.FirstOrDefault(x => x.Id == e.EmployeId);

                if (x != null)
                {
                    employeesInGroup.Add(x);

                }



            }

            workerPaymentDetailsBydates = new List<WorkerPaymentDetailsBydate>();

            foreach (Employee e in employeesInGroup)
            {
                workerPaymentDetailsBydates.Add(

                    new WorkerPaymentDetailsBydate
                        {
                            Id = Guid.NewGuid(),
                            EmployeeId = e.Id,
                            Date = selectedDate
                        }

                );

            }

            workerPaymentDetailsBydatesFiltered = new List<WorkerPaymentDetailsBydate>(workerPaymentDetailsBydates);

        }



        _isFacingEMployees = false;
        await InvokeAsync(StateHasChanged);



    }

    async Task onSearch(ChangeEventArgs e)
    {
        _isSearching = true;
        await InvokeAsync(StateHasChanged);
        await Task.Run(() =>
        {
            var search = e?.Value?.ToString();

            var empId = employeesInGroup.FirstOrDefault(x => x.EmployeeCode == search)?.Id;

            if (empId != null)
            {
                workerPaymentDetailsBydatesFiltered = workerPaymentDetailsBydates.Where(x => x.EmployeeId == empId).ToList();
            }
            else
            {
                workerPaymentDetailsBydatesFiltered = workerPaymentDetailsBydates.ToList();
            }
        }

        );
        _isSearching = false;
        await InvokeAsync(StateHasChanged);

    }


    async Task ondateSelect(ChangeEventArgs e)
    {
        _isdateLoading = true;
        await InvokeAsync(StateHasChanged);

        await Task.Run(() =>
        {
            selectedDate = DateOnly.Parse(e?.Value?.ToString());

            workerPaymentDetailsBydates.ForEach(item => item.Date = selectedDate);


        });

        _isdateLoading = false;
        await InvokeAsync(StateHasChanged);
    }


    async Task save()
    {
        _isSaving = true;
        await InvokeAsync(StateHasChanged);


        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            List<WorkerPaymentDetailsBydate> workerPaymentDetailsBydatesExisting = await dbcontext.WorkerPaymentDetailsBydates.Where(x => x.Date == selectedDate).ToListAsync();

            workerPaymentDetailsBydatesnotAdded = new List<WorkerPaymentDetailsBydate>();


            foreach (var w in workerPaymentDetailsBydates)
            {
                if (w.InTime != null && w.OutTime != null)
                {
                    if (workerPaymentDetailsBydatesExisting.FirstOrDefault(x => x.EmployeeId == w.EmployeeId) == null)
                    {

                        // w.Date = selectedDate;

                        dbcontext.WorkerPaymentDetailsBydates.Add(w);



                    }
                    else
                    {
                        workerPaymentDetailsBydatesnotAdded.Add(w);
                    }

                }

            }
            await dbcontext.SaveChangesAsync();

        }

        await onGroupSelected(selectedGroup.Id);


        _isSaving = false;

        await InvokeAsync(StateHasChanged);


    }

}
