@page "/setrate"

@*<button @onclick="createFake">Create fake data</button>*@

@inject NavigationManager nav
@if (loading)
{
    <Chase Size="100px" style="margin-left:45%; margin-top: 45vh;"></Chase>
}
else
{

    @if (logger.checkAccess("/setrate", rollId))
    {
        <div class="container-fluid shadow">
            <div class="row">


                <div class="col-12 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">


                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0)">
                        <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee( __e?.Value?.ToString()) )" placeholder="Search Employees" />
                    </Animate>



                </div>

                <div class="col-6 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                </div>


            </div>


            <div class="row" style="padding:10px; margin-top:10px">
                <div class="col-3 employe-list-scroll" style="overflow-y:auto; height:80vh">
                    <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                        <table class="table table-bordered table-responsive   employee-list">
                            <thead class="sticky-top">
                                <tr class="sticky-table-header thead-dark">



                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                        Name
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                        IC/PP
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                        Code
                                    </th>


                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var e in employeeListSearched)
                                {
                                    @if (selectedEmployees.Contains(e))
                                    {
                                        <tr class="table-light-1" @onclick="()=>selectedEmployees.Remove(e)">




                                            <td>
                                                @e.FirstName&nbsp;@e.LastName
                                            </td>
                                            <td>
                                                @e.IcPp
                                            </td>
                                            <td>
                                                @e.EmployeeCode
                                            </td>



                                        </tr>
                                    }


                                }
                                @foreach (var e in employeeListSearched)
                                {
                                    @if (!selectedEmployees.Contains(e))
                                    {
                                        <tr class="table-dark" @onclick="()=> {selectedEmployees.Add(e); SelectedEmployee = e;}">


                                            <td>
                                                @e.FirstName&nbsp;@e.LastName
                                            </td>
                                            <td>
                                                @e.IcPp
                                            </td>
                                            <td>
                                                @e.EmployeeCode
                                            </td>


                                        </tr>
                                    }

                                }



                            </tbody>
                        </table>
                    </Animate>


                </div>
                <div class="col-6">
                    @if (israteLoading)
                    {

                        <Chase></Chase>

                    }
                    else
                    {
                        @if (selectedEmployees.Count > 0)
                        {


                            <div class="row">
                                <div class=" col-3">
                                    <label>
                                        From Date
                                    </label>
                                    <input class="form-control" @bind="newRate.SinceDate" type="datetime-local">
                                </div>
                                <div class=" col-3">
                                    <label>
                                        Last Date
                                    </label>
                                  @*   <input class="form-control" @bind="newRate.Lastdate" type="datetime-local"> *@
                                </div>
                                <div class=" col-2">
                                    <label>
                                        Rate
                                    </label>
                                    <input class="form-control" @bind="newRate.Rate" type="number">
                                </div>
                                <div class="col-2" style="padding-top:23px">
                                    @if (issaving)
                                    {
                                        <Chase></Chase>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="save">Save</button>
                                    }

                                </div>
                            </div>
                            <br>








                        }
                        else
                        {
                            <h5>Please slect an employee to see rate or add new</h5>
                        }



                    }

                    <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee1( __e?.Value?.ToString()) )" placeholder="Search Employees" />
                    <div class="p-1" style="overflow-y:auto; height:80vh">
                        <table class="table table-secondary table-sm">

                            <thead>
                                <tr>
                                    <th>
                                        Employee Name/code
                                    </th>
                                    <th>
                                        Working hours
                                    </th>
                                </tr>


                            </thead>

                            <tbody>
                                @foreach (Employee e in employeeListSearched1)
                                {
                                    <tr>

                                        <td>
                                            @e.FirstName&nbsp;@e.LastName (@e.EmployeeCode)
                                        </td>
                                        <td>
                                            <table class="table table-active">

                                                @foreach (var rate in workerHourlyRates.Where(x => x.EmployeeId == e.Id).OrderBy(x => x.SinceDate))
                                                {
                                                    <tbody>
                                                        <tr>
                                                            <td>Since: @rate.SinceDate</td>
                                                            <td>To: @rate.SinceDate</td>
                                                            <td>Rate: @rate.Rate  </td>
                                                        </tr>
                                                    </tbody>
                                                }
                                            </table>

                                        </td>



                                    </tr>


                                }


                            </tbody>

                        </table>
                    </div>
                   


                </div>


            </div>

        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="col">
                <img src="download.jpg" class="img-fluid" alt="Responsive image">
            </div>
        </div>
    }




}




@code {
    List<Employee> employeeList = new List<Employee>();
    List<Employee> employeeListSearched = new List<Employee>();

    List<Employee> employeeListSearched1 = new List<Employee>();

    List<Employee> selectedEmployees = new List<Employee>();

    List<WorkerHourlyRate> workerHourlyRates = new List<WorkerHourlyRate>();



    Employee SelectedEmployee;

    Logger logger = new Logger();
    string rollId = string.Empty;

    bool loading = false;
    bool israteLoading = false;
    bool issaving = false;
    [CascadingParameter] Blazored.Modal.Services.IModalService Modal { get; set; } = default!;

    TimeSpan extratime = new TimeSpan();

    DateTime selectedDate = DateTime.Today;

    WorkerHourlyRate newRate = new WorkerHourlyRate();

    WorkerWorkingHour w;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);

        rollId = await localStorage.GetItemAsync<string>("Roll");

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {


            employeeList = await dbcontext.Employees.Where(x => x.Level != "Staff" && x.Level != "Admin").OrderByDescending(x => x.Active).ThenBy(x => x.FirstName).ToListAsync();

            employeeListSearched = employeeList;

            workerHourlyRates = await dbcontext.WorkerHourlyRates.ToListAsync();

            employeeListSearched1 = employeeList;

            newRate.SinceDate = DateTime.Now;
           // newRate.Lastdate = DateTime.Now;

        }


        loading = false;
        await InvokeAsync(StateHasChanged);

    }

    void searchEmployee1(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched1 = employeeList.Where(x =>

            (x.FirstName != null &&
            x.LastName != null &&
            x.EmployeeCode != null &&
            x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }


    void searchEmployee(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched = employeeList.Where(x =>

            (x.FirstName != null &&
            x.LastName != null &&
            x.EmployeeCode != null &&
            x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }


    async Task save()
    {
        issaving = true;
        await InvokeAsync(StateHasChanged);
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            foreach (Employee e in selectedEmployees)
            {
                Random rnd = new Random();
                WorkerHourlyRate newRate = new WorkerHourlyRate()
                    {
                        Id = Guid.NewGuid(),
                        EmployeeId = e.Id,
                        Rate = rnd.Next(5, 15),
                        SinceDate = this.newRate.SinceDate,
                       // Lastdate = this.newRate.Lastdate


                    };
                dbcontext.WorkerHourlyRates.Add(newRate);


                await dbcontext.SaveChangesAsync();


            }

            workerHourlyRates = await dbcontext.WorkerHourlyRates.ToListAsync();
        }


        issaving = false;
        await InvokeAsync(StateHasChanged);
    }


    async Task createFake()
    {
        israteLoading = true;
        await InvokeAsync(StateHasChanged);
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            foreach (Employee e in selectedEmployees)
            {
                Random rnd = new Random();
                WorkerHourlyRate newRate = new WorkerHourlyRate()
                    {
                        Id = Guid.NewGuid(),
                        EmployeeId = e.Id,
                        Rate = rnd.Next(5, 15),
                        SinceDate = this.newRate.SinceDate,
                       // Lastdate = this.newRate.Lastdate


                    };
                dbcontext.WorkerHourlyRates.Add(newRate);
                await dbcontext.SaveChangesAsync();
            }


        }
        israteLoading = false;
        await InvokeAsync(StateHasChanged);
    }



}
