@page "/advancePayment"

<div class="container-fluid">
    <div class="row">
        <div class="col-2 p-1">
            @if (!_isLoading)
            {
                <div class="input-group my-1">
                    <input type="search" class="form-control" @oninput="(ChangeEventArgs e) => search(e?.Value?.ToString())" placeholder="search" />
                </div>
                <hr />
                <table class="table table-responsive table-sm table-striped table-bordered">
                    <thead class="table-secondary">
                        <tr>
                            <th class="bg-secondary text-white">Employee</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var e in SearchedEMployess.OrderBy(x => x.EmployeeCode).Skip((currentPageSearchedEmployees - 1) * pageSizeSearchedEmployees).Take(pageSizeSearchedEmployees))
                        {
                            <tr>
                                <td class="d-flex justify-content-between">
                                    @if (selectedEMployee != null && selectedEMployee == e)
                                    {
                                        <h6>@e.FirstName @e.LastName (@e.EmployeeCode)</h6>
                                        <button class="btn btn-success btn-sm ms-auto" @onclick="()=>selectedEMployee = null">De-Select</button>
                                    }
                                    else
                                    {
                                        <h6>@e.FirstName @e.LastName (@e.EmployeeCode)</h6>
                                        <button class="btn btn-outline-success btn-sm ms-auto" @onclick="()=>selectEmployee(e)">Select</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="text-center">
                    <button class="btn btn-secondary" @onclick="() => ChangePageSearchedEmployees(-1)" disabled="@(currentPageSearchedEmployees == 1)">Previous</button>
                    Page @currentPageSearchedEmployees of @TotalPagesSearchedEmployees
                    <button class="btn btn-secondary" @onclick="() => ChangePageSearchedEmployees(1)" disabled="@(currentPageSearchedEmployees == TotalPagesSearchedEmployees)">Next</button>
                </div>
            }
            else
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>

        <div class="col-6">
            <div class="input-group m-2 p-1">
                <input class="form-control" type="text" placeholder="Amount to pay" @bind="advance.RequestAmount" />
                <input class="form-control" type="date" @bind="advance.ApprovalDate" />
                @if (selectedEMployee == null)
                {
                    <button class="btn btn-secondary" disabled>PAY</button>
                }
                else
                {
                    @if (_isPoolingAdvances)
                    {
                        <button class="btn btn-primary">
                            <div class="spinner-border text-light" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="saveAdvance">PAY</button>
                    }
                }
            </div>
            <hr />
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_isPoolingAdvances)
                    {
                        <tr>
                            <td colspan="2" class="text-center">
                                <div class="spinner-grow text-primary"></div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @if (selectedEMployee != null && advances != null)
                        {
                            foreach (var p in advances.OrderByDescending(x => x.ApprovalDate))
                            {
                                <tr>
                                    <td>@p.ApprovalDate.ToString()</td>
                                    <td>@p.RequestAmount</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="col-4 p-2">
            @if (selectedEMployee != null)
            {
                <div class="row">
                    <table class="table table-striped table-bordered">
                        <tbody>
                            <tr>
                                <th>Total Paid</th>
                                <td>@total_paid</td>
                            </tr>
                            <tr>
                                <th>Total Advance Taken</th>
                                <td>@total_advance</td>
                            </tr>
                            <tr>
                                <th>Total Equity</th>
                                <td>@total_equity</td>
                            </tr>
                            <tr>
                                <th>Total Unpaid</th>
                                <td>@remainingPay</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    bool _isLoading = false;
    bool _isPoolingAdvances = false;

    int currentPageSearchedEmployees = 1;
    int pageSizeSearchedEmployees = 15;
    int TotalPagesSearchedEmployees => (int)Math.Ceiling((double)SearchedEMployess.Count / pageSizeSearchedEmployees);

    decimal? total_equity = 0;
    decimal? total_paid = 0;
    double? total_advance = 0;
    decimal? remainingPay = 0;

    string? searchString = null;

    Employee selectedEMployee = null;
    Advance advance = new Advance();

    List<Employee> employees = new List<Employee>();
    List<Employee> SearchedEMployess;

    List<Advance> advances = new List<Advance>();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            employees = await dbcontext.Employees
                .Join(dbcontext.Rolls, employee => employee.RollId, roll => roll.Id, (employee, roll) => new { employee, roll })
                .Where(x => x.roll.LevelId != null)
                .Join(dbcontext.Levels, employeeRoll => employeeRoll.roll.LevelId, level => level.LevelId, (employeeRoll, level) => new { employeeRoll.employee, employeeRoll.roll, level })
                .Where(x => x.level.LevelName == "Worker")
                .Select(x => x.employee)
                .ToListAsync();
            SearchedEMployess = employees.OrderBy(x =>x.EmployeeCode).ToList();
        }
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    void search(string search)
    {
        searchString = search;
        currentPageSearchedEmployees = 1;
        SearchedEMployess = employees.Where(x => (x.FirstName != null && x.LastName != null && x.EmployeeCode != null) && (x.FirstName.ToLower().Contains(searchString.ToLower()) || x.LastName.ToLower().Contains(searchString.ToLower()) || x.EmployeeCode.ToLower().Contains(searchString.ToLower()))).ToList();
        StateHasChanged();
    }

    void ChangePageSearchedEmployees(int change)
    {
        currentPageSearchedEmployees = Math.Max(1, Math.Min(TotalPagesSearchedEmployees, currentPageSearchedEmployees + change));
    }

    async Task selectEmployee(Employee e)
    {
        _isPoolingAdvances = true;
        selectedEMployee = e;
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            advances = await dbcontext.Advances.Where(x => x.EmployeeId == e.Id).ToListAsync();
            total_paid = await dbcontext.WorkerPaymentDetailsBydates.Where(x => x.EmployeeId == e.Id && x.Paid == true).SumAsync(x => x.TotalEarnedOnDate);
            remainingPay = await dbcontext.WorkerPaymentDetailsBydates.Where(x => x.EmployeeId == e.Id && x.Paid == false).SumAsync(x => x.TotalEarnedOnDate);
            total_advance = advances.Sum(x => x.RequestAmount);
            total_equity = total_paid - (decimal?)total_advance;
        }
        _isPoolingAdvances = false;
    }

    async Task saveAdvance()
    {
        _isPoolingAdvances = true;
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
            advance.Id = Guid.NewGuid();
            advance.EmployeeId = selectedEMployee.Id;
            dbcontext.Advances.Add(advance);
            await dbcontext.SaveChangesAsync();
            advances = await dbcontext.Advances.Where(x => x.EmployeeId == selectedEMployee.Id).ToListAsync();
            await selectEmployee(selectedEMployee);
            advance = new Advance();
        }
        _isPoolingAdvances = false;
        await InvokeAsync(StateHasChanged);
    }
}
