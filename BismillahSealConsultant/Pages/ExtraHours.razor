@page "/extrahours"

@inject NavigationManager nav
@if (loading)
{
    <Chase Size="100px" style="margin-left:45%; margin-top: 45vh;"></Chase>
}
else
{

    @if (logger.checkAccess("/extrahours", rollId))
    {
        <div class="container-fluid shadow">
            <div class="row">
                <div class="col-12 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0)">
                        <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee( __e?.Value?.ToString()) )" placeholder="Search Employees" />
                    </Animate>



                </div>

                <div class="col-6 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                </div>


            </div>


            <div class="row" style="padding:10px; margin-top:10px">
                <div class="col-3 employe-list-scroll" style="overflow-y:auto; height:80vh">
                    <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                        <table class="table table-bordered table-responsive table-striped table-hover employee-list table-sm">
                            <thead class="sticky-table-header">
                                <tr>


                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                        Name
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                        IC/PP
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                        Code
                                    </th>


                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var e in employeeListSearched)
                                {
                                    @if (!selectedEmployees.Contains(e))
                                    {
                                        <tr @onclick="()=>{ SelectedEmployee=e;selectedEmployees.Add(e); StateHasChanged(); }">




                                            <td>
                                                <a> @e.FirstName&nbsp;@e.LastName</a>
                                            </td>
                                            <td>
                                                <a> @e.IcPp</a>
                                            </td>
                                            <td>
                                                <a>  @e.EmployeeCode</a>
                                            </td>



                                        </tr>
                                    }
                                    else
                                    {

                                        <tr class="table-dark" @onclick="()=>{SelectedEmployee = e;selectedEmployees.Remove(e); StateHasChanged();}">




                                            <td>
                                                <a>  @e.FirstName&nbsp;@e.LastName</a>
                                            </td>
                                            <td>
                                                <a>  @e.IcPp</a>
                                            </td>
                                            <td>
                                                <a>  @e.EmployeeCode</a>
                                            </td>


                                        </tr>

                                    }

                                }

                            </tbody>
                        </table>
                    </Animate>


                </div>

                <div class="col-6" style="overflow-y:auto; height:80vh">

                    <h5> Please Select the date you want to add extra hours for </h5>

                    <input type="date" @bind=slectedDate class="form-control">

                    <br>
                    <br>
                    <br>
                    <br>
                    @if (SelectedEmployee != null)
                    {
                        <h5> Please innsert the time for the @SelectedEmployee.FirstName&nbsp;@SelectedEmployee.LastName </h5>
                        <div class="input-group">



                            <input class="form-control text-danger" value="@extratime" @onchange="@((ChangeEventArgs __e) =>{



                                                try{
                                                    extratime = TimeSpan.Parse(__e?.Value?.ToString());
                                                    }catch{
                                                                var parameters = new ModalParameters().Add(nameof(OkModal.Message),$"{__e?.Value?.ToString()} is not the current format for time");

                                                                var modal = Modal.Show<OkModal>("Please correect the time format", parameters);

                                                }





                                          })">


                            @if(issaving){
                                <Chase></Chase>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="save"> Save </button>
                            }

                           

                        </div>
                    }
                    else
                    {
                        <h5l> Please Select an Employee to add extra hours</h5l>
                    }


                </div>
            </div>

        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="col">
                <img src="download.jpg" class="img-fluid" alt="Responsive image">
            </div>
        </div>
    }



}




@code {
    List<Employee> employeeList = new List<Employee>();
    List<Employee> employeeListSearched = new List<Employee>();

    Logger logger = new Logger();
    string rollId = string.Empty;

    Employee SelectedEmployee;

    List<Employee> selectedEmployees = new List<Employee>();


    bool issaving = false;
    bool loading = false;
    [CascadingParameter] Blazored.Modal.Services.IModalService Modal { get; set; } = default!;

    TimeSpan extratime = new TimeSpan();

    DateTime slectedDate = DateTime.Today;



    WorkerWorkingHour w;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);
        rollId = await localStorage.GetItemAsync<string>("Roll");
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {


            employeeList = await dbcontext.Employees.OrderByDescending(x => x.Active).ThenBy(x => x.FirstName).ToListAsync();

            employeeListSearched = employeeList;


        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    void searchEmployee(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched = employeeList.Where(x =>

            (x.FirstName != null &&
            x.LastName != null &&
            x.EmployeeCode != null &&
            x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }
    async Task save()
    {
        issaving = true;
        await InvokeAsync(StateHasChanged);

        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {
           



            var workingHours = await dbcontext.WorkerWorkingHours.Where(x => x.Date == DateOnly.FromDateTime(slectedDate)).ToListAsync();




            foreach (var workingHour in workingHours)
            {
                if(selectedEmployees.FirstOrDefault(x=>x.Id == workingHour.EmployeeId) ==null)
                {
                    if (workingHour != null)
                    {

                        if (workingHour.InAm == null && workingHour.InPm == null && workingHour.OutPm == null && workingHour.OutAm == null)
                        {
                            var parameters = new ModalParameters().Add(nameof(OkModal.Message), $"");

                            var modal = Modal.Show<OkModal>($"{SelectedEmployee.FirstName} {SelectedEmployee.LastName} Was Absent on this day", parameters);
                        }
                        else
                        {
                            workingHour.ExtraHour = extratime;



                            var parameters = new ModalParameters().Add(nameof(OkModal.Message), $"");

                           // var modal = Modal.Show<OkModal>($"Extra {extratime} Working Hour for {SelectedEmployee.FirstName} {SelectedEmployee.LastName} Has been added", parameters);
                        }





                    }
                    else
                    {
                        var parameters = new ModalParameters().Add(nameof(OkModal.Message), $"");

                        var modal = Modal.Show<OkModal>($"No data Found for {SelectedEmployee.FirstName} {SelectedEmployee.LastName} on date {slectedDate.Date}", parameters);
                    }
                }

               
            }


           await dbcontext.SaveChangesAsync();
        }
        selectedEmployees = new List<Employee>();
        issaving = false;
        await InvokeAsync(StateHasChanged);
    }



}
