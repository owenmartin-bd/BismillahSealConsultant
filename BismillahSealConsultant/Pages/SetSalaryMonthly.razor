@page "/setSalaryWorkerDeductions"



@inject NavigationManager nav
@if (loading)
{
    <Chase Size="100px" style="margin-left:45%; margin-top: 45vh;"></Chase>
}
else
{

    @if (logger.checkAccess("/setSalaryWorkerDeductions", rollId))
    {
        <div class="container-fluid shadow">
            <div class="row">
                <div class="col-12 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                    <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)" Delay="TimeSpan.FromSeconds(0)">
                        <input class="form-control" type="text" @oninput="@((ChangeEventArgs __e) =>searchEmployee( __e?.Value?.ToString()) )" placeholder="Search Employees" />
                    </Animate>

                </div>

                <div class="col-6 bg-opacity-75 bg-gradient" style="padding-top:10px; padding-bottom:10px">
                </div>


            </div>


            <div class="row" style="padding:10px; margin-top:10px">
                <div class="col-3 employe-list-scroll" style="overflow-y:auto; height:80vh;border:1px solid #e7e7e7;">

                    <Animate Animation="Animations.SlideUp" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0)">
                        <h5>Click to select and double click to see if there is any data for the selected date </h5>
                        <table class="table sticky-table-header table-responsive table-striped table-hover employee-list table-sm">
                            <thead>
                                <tr class="sticky-top sticky-table-header">



                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.FirstName).ToList();}">
                                        Name
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.IcPp).ToList();}">
                                        IC/PP
                                    </th>
                                    <th @onclick="()=>{employeeListSearched= employeeList.OrderBy(x=>x.EmployeeCode).ToList();}">
                                        Code
                                    </th>


                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var e in employeeListSearched)
                                {
                                    @if (SelectedEmployee != null && SelectedEmployee == e)
                                    {
                                        <tr class="table-light-1" @onclick="@(async()=>{

                                        if(extradeduction.Date != null){
                                              SelectedEmployee = e;
                                        using(sealConsultantContext dbcontext = new sealConsultantContext())
                                        {
                                            var extradeductionlocal = await dbcontext.Extradeductions.FirstOrDefaultAsync(x=> x.Date.Value.Month == extradeduction.Date.Value.Month && x.EmployeeId == SelectedEmployee.Id);

                                            if(extradeductionlocal != null){
                                                extradeduction = extradeductionlocal;
                                            }

                                        }
                                        }else{
                                               var parameters = new ModalParameters().Add(nameof(OkModal.Message), "Please Select a month");
                                                var modal=Modal.Show<OkModal>("Confimation", parameters);
                                        }


                                    })">




                                            <td>
                                                @e.FirstName&nbsp;@e.LastName
                                            </td>
                                            <td>
                                                @e.IcPp
                                            </td>
                                            <td>
                                                @e.EmployeeCode
                                            </td>



                                        </tr>
                                    }
                                    else
                                    {

                                        <tr class="table-light-2" @onclick="async()=>{

                                        SelectedEmployee = e;

                                        await InvokeAsync(StateHasChanged);

                                    }">




                                            <td>
                                                @e.FirstName&nbsp;@e.LastName
                                            </td>
                                            <td>
                                                @e.IcPp
                                            </td>
                                            <td>
                                                @e.EmployeeCode
                                            </td>


                                        </tr>

                                    }

                                }

                            </tbody>
                        </table>
                    </Animate>


                </div>


                <div class="col-9" style="overflow-y:auto; height:80vh">
                    <h6>Select Date</h6>
                    <input class="form-control" style="max-width:200px" @bind="extradeduction.Date" type="date">

                    <br />

                    <h6>Please input extra Deduction Fields</h6>
                    <table class="table table-light table-responsive">
                        <thead>
                            <tr>
                                <td>Levy</td>
                                <td>Probash deposit</td>
                                <td>Probash loan</td>
                                <td>office advance</td>
                                <td>site advance</td>
                                <td>previous loan</td>
                                <td>PPE</td>
                                <td>Penalty</td>
                                <td>Others</td>
                                <td>EPF</td>
                                <td>Socso</td>
                            </tr>
                        </thead>
                        <tr>
                            <td>
                                <input class="form-control" @bind="extradeduction.Levy" placeholder="Levy">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.ProbashDeposit" placeholder="Probash deposit">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.ProbashLoan" placeholder="Probash loan">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.OfficeAdvance" placeholder="office advance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.SiteAdvance" placeholder="site advance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.PreviousLoan" placeholder="previous loan">

                            </td>

                            <td>
                                <input class="form-control" @bind="extradeduction.Ppe" placeholder="PPE">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.Penalty" placeholder="Penalty">

                            </td>
                            <td>
                                <input class="form-control" @bind="extradeduction.Others" placeholder="Others">
                                @* <br/>

                        <textarea class="form-control" @bind="extradeduction.RmarkOthers" placeholder="Others description" rows="2" cols="2"> </textarea>*@

                            </td>
                            <td>

                                <input class="form-check-input m-3" type="checkbox" @bind="extradeduction.Epf" />


                            </td>
                            <td>

                                <input class="form-check-input m-3" type="checkbox" @bind="extradeduction.Sosco" />


                            </td>
                        </tr>
                    </table>
                    <br />

                    @*    ...................................................................................................................................................................................................................................*@
                    <h6>Please input extra Earnings Fields</h6>
                    <table class="table table-light table-responsive">
                        <thead>
                            <tr>
                                <td>Food_allowance</td>
                                <td>Mobile_allowance</td>
                                <td>House_allowance</td>
                                <td>Night_work_allowance</td>
                                <td>Other_allowance</td>

                            </tr>
                        </thead>
                        <tr>
                            <td>
                                <input class="form-control" @bind="extraEarn.FoodAllowance" placeholder="Food Allowance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extraEarn.MobileAllowance" placeholder="Mobile Allowance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extraEarn.HouseAllowance" placeholder="House Allowance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extraEarn.NightWorkAllowance" placeholder="Night Work Allowance">

                            </td>
                            <td>
                                <input class="form-control" @bind="extraEarn.OtherAllowance" placeholder="Other Allowance">

                            </td>



                        </tr>
                    </table>

                    @*.............................................................................................................................................................................................................................................*@

                    <button class="btn btn-success" @onclick="save"> Save </button>

                </div>






            </div>

        </div>
    }
    else
    {
        <div class="container-fluid">
            <div class="col">
                <img src="download.jpg" class="img-fluid" alt="Responsive image">
            </div>
        </div>
    }


}




@code {
    List<Employee> employeeList = new List<Employee>();
    List<Employee> employeeListSearched = new List<Employee>();

    Employee SelectedEmployee;
    bool loading = false;
    bool israteLoading = false;
    bool issaving = false;
    Logger logger = new Logger();
    string rollId = string.Empty;

    [CascadingParameter] Blazored.Modal.Services.IModalService Modal { get; set; } = default!;


    Extradeduction extradeduction = new Extradeduction();
    ExtraEarn extraEarn = new ExtraEarn();


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);
        rollId = await localStorage.GetItemAsync<string>("Roll");
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {


            employeeList = await dbcontext.Employees.Where(x => x.Level != "Staff").OrderByDescending(x => x.Active).ThenBy(x => x.FirstName).ToListAsync();

            employeeListSearched = employeeList;

            extraEarn = new ExtraEarn
                {
                    MobileAllowance = 50,
                    HouseAllowance = 100,
                    FoodAllowance = 100,
                    NightWorkAllowance = 100
                };


        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    async Task save()
    {
        using (sealConsultantContext dbcontext = new sealConsultantContext())
        {

            var ed = await dbcontext.Extradeductions.FirstOrDefaultAsync(x => x.Date.Value.Month == extradeduction.Date.Value.Month && x.EmployeeId == SelectedEmployee.Id);

            var ea = await dbcontext.ExtraEarns.FirstOrDefaultAsync(x => x.Date.Value.Month == extradeduction.Date.Value.Month && x.EmployeeId == SelectedEmployee.Id);

            if (ed == null && ea == null)
            {
                if (SelectedEmployee != null)
                {
                    extradeduction.Id = Guid.NewGuid();
                    extradeduction.EmployeeId = SelectedEmployee.Id;

                    extraEarn.Id = Guid.NewGuid();

                    extraEarn.Date = extradeduction.Date;

                    extraEarn.EmployeeId = SelectedEmployee.Id;


                    dbcontext.Extradeductions.Add(extradeduction);

                    dbcontext.ExtraEarns.Add(extraEarn);

                    await dbcontext.SaveChangesAsync();

                    var parameters = new ModalParameters().Add(nameof(OkModal.Message), "Data Added");

                    var modal = Modal.Show<OkModal>("Confimation", parameters);

                }
                else
                {
                    var parameters = new ModalParameters().Add(nameof(OkModal.Message), "Please Select an employee");

                    var modal = Modal.Show<OkModal>("Confimation", parameters);
                }
            }
            else
            {
                var parameters = new ModalParameters().Add(nameof(OkModal.Message), "Data for this month already Exits");

                var modal = Modal.Show<OkModal>("Confimation", parameters);
            }



        }
    }


    void searchEmployee(string? text)
    {
        //  Console.WriteLine(text);


        if (text != null)
        {


            employeeListSearched = employeeList.Where(x =>

            (x.FirstName != null &&
             x.LastName != null &&
             x.EmployeeCode != null &&
             x.IcPp != null) &&


            (x.FirstName.ToLower().Contains(text.ToLower()) ||
            x.LastName.ToLower().Contains(text.ToLower()) ||

            x.IcPp.ToLower().Contains(text.ToLower()) ||

            x.EmployeeCode.ToLower().Contains(text.ToLower()))

            ).ToList();

            StateHasChanged();

        }


    }









}
